<component name="InspectionProjectProfileManager">
  <profile version="1.0">
    <option name="myName" value="Project Default" />
    <inspection_tool class="Eslint" enabled="true" level="ERROR" enabled_by_default="true" />
    <inspection_tool class="SSBasedInspection" enabled="true" level="WARNING" enabled_by_default="true">
      <replaceConfiguration name="mock to jasmine spy" text="var $varName$ = {&#10;&#9;$functionName$: function() {&#10;&#9;}&#10;};" recursive="false" caseInsensitive="true" type="JavaScript" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="jasmine.createSpyObj($stringVarName$, [$stringFunctionName$]);">
        <constraint name="varName" within="" contains="" />
        <constraint name="functionName" maxCount="2147483647" within="" contains="" />
        <variableDefinition name="stringVarName" script="&quot;&quot;'&quot;+varName.getText()+&quot;'&quot;&quot;" />
        <variableDefinition name="stringFunctionName" script="&quot;&quot;'&quot;+functionName.getText()+&quot;'&quot;&quot;" />
      </replaceConfiguration>
      <replaceConfiguration name="inject with minification" text="inject([$injection$, function($argument$) {&#10;&#9;$statement$;&#10;}]);" recursive="false" caseInsensitive="false" type="JavaScript" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="inject(function($argument$) {&#10;&#9;$statement$;&#10;});">
        <constraint name="injection" maxCount="2147483647" within="" contains="" />
        <constraint name="argument" maxCount="2147483647" within="" contains="" />
        <constraint name="statement" maxCount="2147483647" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="inject arguments without underscore" text="inject(function($argument$) {&#10;&#9;$assignedVar$ = $argument$;&#10;});" recursive="false" caseInsensitive="false" type="JavaScript" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="inject(function(_$argument$_) {&#10;&#9;$assignedVar$ = _$argument$_;&#10;});">
        <constraint name="argument" regexp="[^_].*[^_]" within="" contains="" />
        <constraint name="assignedVar" within="" contains="" />
      </replaceConfiguration>
      <searchConfiguration name="string constant" text="var $varName$ = $value$;" recursive="false" caseInsensitive="true" type="JavaScript">
        <constraint name="varName" regexp="([a-z]+)([A-Z][a-z]*)*" within="" contains="" />
        <constraint name="value" regexp="'(.*)'" within="" contains="" />
      </searchConfiguration>
      <searchConfiguration name="array constant" text="var $varName$ = $value$;" recursive="false" caseInsensitive="true" type="JavaScript">
        <constraint name="varName" regexp="([a-z]+)([A-Z][a-z]*)*" within="" contains="" />
        <constraint name="value" regexp="\[(.*)\]" within="" contains="" />
      </searchConfiguration>
      <replaceConfiguration name="controller non-anonymous function" text="angular.controller($controllerName$, [$injectionArgument$, function($controllerArgument$) {&#10;&#9;$statement$;&#10;}]);" recursive="false" caseInsensitive="false" type="JavaScript" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="angular.controller($controllerName$, [$injectionArgument$, $controllerFunctionName$]);&#10;&#10;function $controllerFunctionName$($controllerArgument$) {&#10;&#9;$statement$;&#10;}">
        <constraint name="controllerName" within="" contains="" />
        <constraint name="injectionArgument" maxCount="2147483647" within="" contains="" />
        <constraint name="controllerArgument" maxCount="2147483647" within="" contains="" />
        <constraint name="statement" minCount="0" maxCount="2147483647" within="" contains="" />
        <constraint name="__context__" target="true" within="" contains="" />
        <variableDefinition name="controllerFunctionName" script="&quot;controllerName.getText().replace(&quot;'&quot;,&quot;&quot;)&quot;" />
      </replaceConfiguration>
      <replaceConfiguration name="assertEquals to assertJ" text="assertEquals($expected$, $actual$);" recursive="false" caseInsensitive="false" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="org.assertj.core.api.Assertions.assertThat($actual$).isEqualTo($expected$);">
        <constraint name="expected" within="" contains="" />
        <constraint name="actual" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="assertSame to assertJ" text="assertSame($expected$, $actual$);" recursive="false" caseInsensitive="false" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="org.assertj.core.api.Assertions.assertThat($actual$).isSameAs($expected$);">
        <constraint name="expected" within="" contains="" />
        <constraint name="actual" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="assertNull to assertJ" text="assertNull($actual$);" recursive="false" caseInsensitive="false" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="org.assertj.core.api.Assertions.assertThat($actual$).isNull();">
        <constraint name="actual" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="assertFalse to assertJ" text="assertFalse($actual$);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="org.assertj.core.api.Assertions.assertThat($actual$).isFalse();">
        <constraint name="actual" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="assertTrue to assertJ" text="assertTrue($actual$);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="org.assertj.core.api.Assertions.assertThat($actual$).isTrue();">
        <constraint name="actual" within="" contains="" />
      </replaceConfiguration>
      <replaceConfiguration name="assertNotNull to assertJ" text="assertNotNull($actual$);" recursive="false" caseInsensitive="true" type="JAVA" reformatAccordingToStyle="true" shortenFQN="true" useStaticImport="true" replacement="org.assertj.core.api.Assertions.assertThat($actual$).isNotNull();">
        <constraint name="actual" within="" contains="" />
      </replaceConfiguration>
    </inspection_tool>
    <inspection_tool class="WeakerAccess" enabled="true" level="WARNING" enabled_by_default="true">
      <option name="SUGGEST_PACKAGE_LOCAL_FOR_MEMBERS" value="true" />
      <option name="SUGGEST_PACKAGE_LOCAL_FOR_TOP_CLASSES" value="true" />
      <option name="SUGGEST_PRIVATE_FOR_INNERS" value="false" />
    </inspection_tool>
  </profile>
</component>